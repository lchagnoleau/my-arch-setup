#!/bin/bash

if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 
	exit 1
fi


secureboot_status=$(od -An -t u1 /sys/firmware/efi/efivars/SecureBoot-* | grep -o '.$')
signature_status=$(sbverify --cert /root/secureboot_keys/db.crt /efi/EFI/BOOT/BOOTX64.EFI)

if [ "$secureboot_status" == '1' ] && [ "$signature_status" == 'Signature verification OK' ] # check if Secure Boot is enabled and check if the EFI executable is signed with our Secure Boot db key.
then
	echo "Attempting to add the secret into the TPM..."

	tpm2_evictcontrol -C o -c 0x81000000 # remove the secret from the TPM
	tpm2_createpolicy --policy-pcr -l sha1:0,2,4,7 -L policy.digest
	tpm2_createprimary -C e -g sha1 -G rsa -c primary.context
	tpm2_create -g sha256 -u obj.pub -r obj.priv -C primary.context -L policy.digest -a "noda|adminwithpolicy|fixedparent|fixedtpm" -i secret.bin
	tpm2_load -C primary.context -u obj.pub -r obj.priv -c load.context
	tpm2_evictcontrol -C o -c load.context 0x81000000
	rm load.context obj.priv obj.pub policy.digest primary.context

	echo "Sucessfully added the secret in the TPM."
else
	echo "Secure Boot is not enabled or the EFI executable signature is not matching, aborting..."
fi